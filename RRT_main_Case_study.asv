close all
clear all
clc

x_max = 1000;
y_max = 1000;

poly = { [300,500; 200,200;450,300],[530, 300; 700, 250; 750, 350; 550, 450;],[650, 500; 750, 600; 800, 780; 600, 600;],[500, 550; 450, 650; 310, 750; 340, 600;]};
      

EPS = 70;
numNodes = 500; 

%% Initialization %%%%%%%%%%%
q_start.coord = [0; 0];   %%%*** Write value 
q_start.cost = 0;    %%%*** Write value
q_start.parent = 0;  %%%*** Write value
q_goal.coord = [600; 600];    %%%*** Write value
q_goal.cost = 0;     %%%*** Write value

nodes(1) = q_start;
%%%%%%%%%%%%%%%%%%%%%%%%%%
%setting up timer
c1 = clock;

%plotting the start and goal points
figure(1)
axis([-5 x_max -5 y_max])
hold on
plot(q_start.coord(1),q_start.coord(2),'r*','LineWidth',2)
plot(q_goal.coord(1),q_goal.coord(2),'k*','LineWidth',2)
RRT_obstacles_plot_poly(gca, poly);

%%
for i = 1:1:numNodes


    %% Step 1:Generate Random state or points 
    %%%%==========================================
    q_rand = [randi([0, x_max]), randi([0, y_max])];      %% ***write function

    %%%%% Break if goal node is already reached
    for j = 1:1:length(nodes)
        if dist(nodes(j).coord, q_goal.coord) <= 50   %%%%nodes(j).coord == q_goal.coord
            break
        end
    end
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


    %% Step 2: Pick the closest node from existing list to branch out from
    %%%%%==================================================================
    ndist = [];
    for j = 1:1:length(nodes)
        n = nodes(j);
        tmp = dist(n.coord, q_rand);       %% **write input arguments
        ndist = [ndist tmp];
    end
    [val, idx] = min(ndist);%%%***Write the function
    q_nearest = nodes(idx);
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


    %% Step 3: Steer from 𝑞_𝑛𝑒𝑎𝑟𝑒𝑠𝑡 to 𝑞_𝑟𝑎𝑛𝑑 
    %%%%==========================================
    q_new.coord =    steer(q_rand, q_nearest.coord, val, EPS);   %% ***write the Steer function;
    edge_rand = [q_nearest.coord(1),q_nearest.coord(2); q_new.coord];
    plot(q_rand(1),q_rand(2),'r.')    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


    %% Step 4: Collision check %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%===================================================
    chk_collision(edge_rand, poly); %%%% ***write the input
           
    if chk_collision(edge_rand, poly) == 0  
        line([q_nearest.coord(1), q_new.coord(1)], [q_nearest.coord(2), q_new.coord(2)], 'Color', 'y', 'LineWidth', 1);
        drawnow
        hold on
        q_new.cost =  dist(q_new.coord, q_nearest.coord);      %% ***write cost expression
        q_new.parent =  idx;

  
        %% Step 5: Append to nodes %%%%%%%%%%%
        %%%%====================================
        nodes = [nodes q_new];
    end
end


%% Find Path : Search backwards from goal to start to find the optimal least cost path
%%%%=================================================================================

%%%% Step 1:
D = [];
for j = 1:1:length(nodes)
    tmpdist = dist(nodes(j).coord, q_goal.coord);%%***write input arguments
    D = [D tmpdist];
end

%%%%Step 2:
[val, idx] = min(D);     %%***write input arguments


q_final = nodes(idx);
q_goal.parent = idx;
q_end = q_goal;
nodes = [nodes q_goal];
k =0;
while q_end.parent ~= 0
    start = q_end.parent;
    k=k+1;
    via_points(k,:) = nodes(start);

    %%%%Step 3:
    %%%% ***write experession
    line([q_end.coord(1), nodes(start).coord(1)], [q_end.coord(2), nodes(start).coord(2)], color='g', linewidth = 3);
    %%%% Step 4:
    %%%% ***write experession
    q_end = nodes(start);
    
end

%clock end
c2 = clock;
generation_time = (c2(5) - c1(5)) * 60 + c2(6) - c1(6);
fprintf("The time taken is: %.2f s ", generation_time);



